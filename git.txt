import numpy as np
import cv2
import imutils
import pytesseract

pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

#read image file
image = cv2.imread('car images/3.png')

#resize the image ,change width to 500
image = imutils.resize(image,width=500)

#display original image
cv2.imshow('original image',image)
cv2.waitKey(0)

#RGB to grey scale image
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
cv2.imshow("1 - grayscale conversion",gray)
cv2.waitKey(0)

#noise removal with iterative bilateral filter(removes noise while preserving edges)
gray = cv2.bilateralFilter(gray,11,17,17)
cv2.imshow("2 - bilateral filter",gray)
cv2.waitKey(0)

#find edges of the grayscale image
edged = cv2.Canny(gray,170,200)
cv2.imshow("3 - canny edges",edged)
cv2.waitKey(0)

#find contours based on edges
cnts, new = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

#create copy of original image to draw all contours
imgl = image.copy()
cv2.drawContours(imgl,cnts,-1,(0,255,0),3)
cv2.imshow("4 - All contours",imgl)
cv2.waitKey(0)

#sort contours based on their area keeping minimum required area as '30' (anything smaller than this will not be considered)
cnts = sorted(cnts,key = cv2.contourArea, reverse=True) [:30]
NumberPlateCnt = None #we currently have no number plate contour

#top 30 contours
img2 = image.copy()
cv2.drawContours(img2,cnts,-1,(0,255,0),3)
cv2.imshow("5 - Top 30 contours",img2)
cv2.waitKey(0)

#loop over our contours to find the best possible approximate contour of number plate
count=0
idx=7
for c in cnts:
    peri = cv2.arcLength(c,True)
    approx = cv2.approxPolyDP(c,0.02*peri,True)
    #print("approx = ",approx)
    if len(approx) == 4: #select the contour with 4 cornets
        NumberPlateCnt = approx #this is our approx number plate contour

        #crop those contours and store it in cropped images folder
        x,y,w,h = cv2.boundingRect(c) #this will find out co-ord for plate
        new_img = image[y:y + h,x:x +w] # create new image
        cv2.imwrite('cropped image-text/' + str(idx) + '.png',new_img) #store new image
        idx+=1

        break


#drawing the selected contour on the  original image
#print(numberplatecnt)
cv2.drawContours(image,[NumberPlateCnt],-1,(0,255,0),3)
cv2.imshow("final image with number plate detected",image)
cv2.waitKey(0)

Cropped_img_loc = 'cropped image-text/7.png'
cv2.imshow("Cropped image",cv2.imread(Cropped_img_loc))

#use tesseract to convert image into string
text=pytesseract.image_to_string(Cropped_img_loc,lang='eng')
print("number is: ",text)

cv2.waitKey(0) #wait for user input closing yhe images displayed
